
func unknown()
{
	print("Unknown")
}

func sayUmm()->String
{
	
	return "Umm..." 
}

func sayHi(name: String)->String 
{
	return "Hi: + \(name)"
	
}



func sayHello(name: String ,check:Bool )->String
{
	var name_:String 
	if check
	{
		name_ = sayUmm()
	}
	else
	{
		name_ = sayHi(name:name)
	}

	return name_ 
}
print(sayHello(name:"Tanapat",check:false))
print(sayHello(name:"",check:true))




func Triangle(base:Double,high:Double)-> Double
{
	return ( Double ( (1.0/2.0) * high * base)  )
}


func Area(base:Double,high:Double)->Double
{
	var area:Double
	if base == nil 
	{
		area = base + high 
	}
	else{
		 area = Triangle(base:base,high:high)
	}
	return area 
}

print(Area(base:30,high:5))

/*	Functions with Multiple Return Values
	tuple type
*/



func Garde(score:Int , garde: String ) -> (score_: Int, garde_: String)
{
	var temp : String 
	if score <= 50
	{
		temp = "D"
	}
	else if score <= 80 
	{
		temp = "B"
	}
	else
	{
		temp = "A"
	}
	return (score,temp)
}

var STU = Garde(score:90 ,garde:"") 
print(STU.score_,STU.garde_)




func GardeTwo(score:Int , garde: String ) -> (score_: Int, garde_: String)?
{
	var temp : String 
	if score <= 50
	{
		temp = "D"
	}
	else if score <= 80 
	{
		temp = "B"
	}
	else
	{
		temp = "A"
	}
	return (score,temp)
}

var STU_Two = GardeTwo(score:80 ,garde:"")! 
print(STU_Two.score_,STU_Two.garde_)

if var STU_Three = GardeTwo(score:20 ,garde:"")
{
	print(STU_Three.score_,STU_Three.garde_)
}


func reportGarde(name:String ,garde:String) -> String 
{
	
	return "Name: \(name) Garde: \(garde)" 
}
print(reportGarde(name: "Tan",garde: "A"))



func GPA(_ firstSubjects: Int, secondSubjects: Int)->Int {
    return firstSubjects * secondSubjects 
}
print( "GPA: \(GPA(3, secondSubjects: 2) )" ) 



func GPA_New(_ firstSubjects: Int, secondSubjects: Int = 4) -> Int{
	return firstSubjects * secondSubjects 
}
print( "GPA: \(GPA_New(3, secondSubjects: 1) )" ) 
print( "GPA: \(GPA_New(3) )" ) 


func arithmeticMean(_ numbers: Double...) -> Double {
    var total: Double = 0
    for number in numbers {
        total += number
    }
    return total / Double(numbers.count)
}
print(arithmeticMean(1, 2, 3, 4, 5) ) 
// returns 3.0, which is the arithmetic mean of these five numbers
arithmeticMean(3, 8.25, 18.75)


func maxGrade(array: [Int])-> Int
{	
	var max = array[0]
	for s in array[1..<array.count] {
       if s > max 
		{
			max = s 
		}
	}
	return max 
}




var allSTU = [1,2,3,4]
var all = (1,2,3,4)
print("Max Grade:  \(maxGrade(array:allSTU))") 



func swapGrade(_ a: inout Int, _ b: inout Int) {
    let temporaryA = a
    a = b
    b = temporaryA
}

var STU1 = 20 
var STU2 = 50 
print("Befroe Change Score: STU1: \(STU1) STU2: \(STU2)" )
swapGrade(&STU1, &STU2)
print("Change Score: STU1: \(STU1) STU2: \(STU2)" )


func AVG(_a:Int , _b:Int ) -> Int{
	return (_a+_b)/2
}

if AVG(_a: 10,_b: 2) > 10 
{
	print("Good")
}
else{print ("Bad") }

var avg1:(Int,Int) -> Int = AVG  






func printAVG(_ AVG:(Int,Int) -> Int, _a: Int, _b:Int )
{
	print("Result AVG: \(AVG(30,50))")
}
printAVG(AVG,_a:1,_b:2)
print("Result AVG 1: \(avg1(90,0))")
func minGrade(array: [Int])-> Int
{
	var min = array[0]
	for s in array[1..<array.count] 
	{
       if s < min 
		{
			min = s 
		}
	}
	return min 
}

var min = minGrade(array: allSTU)
var max = maxGrade(array:allSTU)
print("min",min)
print("max",max)



//Nested Functions 
func one(_ input: Int)->Int
{
	return 1 
}
func two(_ input: Int)->Int
{
	
	return 2 
}
func selcet(choice:Bool)-> (Int) -> Int 
{
	return choice ? one : two
	
}
print(selcet(choice:true))
print(selcet(choice:false))

func chooseFunction(choice: Bool) -> (Int) -> Int {
    func one_(input: Int) -> Int { return input+1 }
    func two_(input: Int) -> Int { return input+2 }
    return choice ? one_ : two_
}
var one:(Int)->Int = chooseFunction(choice:true) 
print("\(one(30))")


