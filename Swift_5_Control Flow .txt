//Control Flow 

//For-In Loops 
var membersOasis = [String]() 
membersOasis = ["Liam Gallagher", "Noel Gallagher"] 
membersOasis.append("Andy Bell")
for name in membersOasis {
    print("\(name)!")
}
// For dictionary  

print("----------------------------------------")
//Creating an Empty Dictionary 
var membersBlur = [String: String]()  
membersBlur = ["singer ": "Damon Albarn" ,"guitarist" :"Graham Coxon" , "bassist": " Alex James " ,  "drummer" : " Dave Rowntree" ] 
for (position, name) in membersBlur {
    print("\(position) : \(name)")
}
print("----------------------------------------")

var membersRadiohead = [Int:String]() 
membersRadiohead = [1:"Thom Yorke" , 2: " Ed O'Brien" ] 
membersRadiohead.updateValue("Phil Selway" ,forKey: 3) 
membersRadiohead.updateValue("Jonny Greenwood",forKey: 4)
membersRadiohead.updateValue("Colin Greenwood" ,forKey: 5 ) 

/* Error //extra argument in call 
membersRadiohead.updateValue("Phil Selway" ,forKey: 3,
							 "Jonny Greenwood",forKey: 4 
							 , "Colin Greenwood" ,forKey: 5 ) 

*/
for (key, name) in membersRadiohead {
    print("\(key) : \(name)")
}
print("----------------------------------------")

//  use for-in loops with numeric ranges 

for index in 1...5 {
    print("\(index) times 5 is \(index * 5)")
}

var power  = 5 
for _ in 1...power {
    print("1" )
}

var minutes = 3
for tickMark in 0..<minutes {
   print("minutes: \(tickMark)") 
}


//stride(from:to:by:) function to skip the unwanted marks.
minutes = 50 
let minuteInterval = 5
//for( 0 <  100 ; 5++) from: 0, to: 100 
for tickMark in stride(from: 0, to: 100, by: minuteInterval) {
	print(tickMark)
}



let hours = 12
let hourInterval = 3
//for( 3 <=  12 ; 3++ ) from: 3 , through: 12 
for tickMark in stride(from: 3, through: hours, by: hourInterval) {
    // render the tick mark every 3 hours (3, 6, 9, 12)
	print(tickMark)
}

print("----------------------------------------")

//While Loops
/*
while condition {
    statements
}

*/



var finalSquare = 25
// boar type int default 0 
// int board[26] = { 0 } 
var board = [Int](repeating: 0, count: finalSquare + 1) 
board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02
board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08
// board บอรด์ทั้งหมดมี 25 ช่อง 
// 26 ช่องจบเกม 

var square = 0
var diceRoll = 0 // ทอยลูกเต๋า 
while square < finalSquare {
    // roll the dice
    diceRoll += 1 // 
    if diceRoll == 7 { diceRoll = 1 }
    // move by the rolled amount
	// ทอยถึง 7 เซ็ต 1 
    square += diceRoll
    if square < board.count { //
        // if we're still on the board, move up or down for a snake or a ladder
        square += board[square]
    }
}
print("Game over!")


print("----------------------------------------")

//Repeat-While

/*
repeat {
    statements
} while condition
*/

finalSquare = 25
 board = [Int](repeating: 0, count: finalSquare + 1)
board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02
board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08
square = 0
diceRoll = 0
repeat {
    // move up or down for a snake or ladder
    square += board[square]
    // roll the dice
    diceRoll += 1
    if diceRoll == 7 { diceRoll = 1 }
    // move by the rolled amount
    square += diceRoll
} while square < finalSquare
print("Game over!")

print("----------------------------------------")

// if 
// if else 
var temperatureInFahrenheit = 30
if temperatureInFahrenheit <= 32 {
    print("It's very cold. Consider wearing a scarf.")
}

print("")
var score = 50 
if score <= 20 
{
	print("Grade F")
}
else if score <= 50
{
	print("Grade D")
}	
else if score <= 70 
{
	print("Grade C")
}
else if score <= 80 
{
	print("Grade B")
}	
else 
{
	print("Grade A")
}



print("----------------------------------------")

// Switch 
let someCharacter: Character = "z"
switch someCharacter {
case "a":
    print("The first letter of the alphabet")
case "z":
    print("The last letter of the alphabet")
default:
    print("Some other character")
}
// Prints "The last letter of the alphabet" 

print("----------------------------------------")
let anotherCharacter: Character = "a"
switch anotherCharacter {
case "a", "A": // Type String ใช้ไม่ได้ 
    print("Airbag")
default:
    print("Not A")
}
// Prints "The letter A"

/*
var albumOKComputer: String = "airbag"
switch albumOKComputer {
	case "Airbag", "airbag":
		print(": ",albumOKComputer)
	case "Paranoid Android", "paranoid android ": 
		print(": ",albumOKComputer)
	case "Let Down" , "let down": 
		print(": ",albumOKComputer)
	case "No Surprises", "no surprises": 
		print(": ",albumOKComputer)
	
default:
    print("Not the letter A")
}
*/

var albumOKComputer: String = "Airbag"
switch albumOKComputer {
	case "Airbag":
		print(": ",albumOKComputer)
	case "Paranoid Android": 
		print(": ",albumOKComputer)
	case "Let Down": 
		print(": ",albumOKComputer)
	case "No Surprises": 
		print(": ",albumOKComputer)
	
default:
    print("Not Album Ok Computer ")
}

//Compound Cases 
switch albumOKComputer{
	case "Airbag", "Paranoid Android" ,"Let Down","No Surprises": 
		print("Album OK Computer ")
	
	default:
		print("Not Album Ok Computer ")
}


//Interval Matching 
let approximateCount = 62
let countedThings = "moons orbiting Saturn"
let naturalCount: String
switch approximateCount {
case 0:
    naturalCount = "no"
case 1..<5:
    naturalCount = "a few"
case 5..<12:
    naturalCount = "several"
case 12..<100:
    naturalCount = "dozens of"
case 100..<1000:
    naturalCount = "hundreds of"
default:
    naturalCount = "many"
}
print("There are \(naturalCount) \(countedThings).")
// Prints "There are dozens of moons orbiting Saturn."


// Tuple 
let somePoint = (1,"A Moon Shaped Pool")
switch somePoint {
case (0,"A Moon Shaped Pool"):
    print(" case (0,\"A\") \(somePoint)")
case (_,"A Moon Shaped Pool"):
    print("case(_,\"x\") \(somePoint)")
case (0, _):
    print("case(0,_) \(somePoint)")
case (_,_):
    print("case(_,_) \(somePoint)")
default:
    print("default: \(somePoint) is outside of the box")
}
// Prints "(1, 1) is inside the box"

print("----------------------------------------") 
// Value Bindings

let nameSong = ("Kid A","OK Computer") // Tuple
switch nameSong
{
	case("Kid A",let y):
	print("case(\"Kid A\" \"let y)",nameSong) 
	case(let x,"OK Computer"):
	print("case(let x,\"OK Computer\") : ",x)
	case (let x,let y): 
	print("case (let x, let y ) : ",x,y)
	default: 
	print("default")
	
}


let nameSong_ = ("AA")
switch nameSong_ {
	case("AA"):
	print("AA")
	case("BB"):
	print("BB")
	default: 
	print("defluat ")
}

//Control Transfer Statements 
/*
continue
break
fallthrough
return
throw

*/



//Continue 
var puzzleInput = "great minds think alike"
var puzzleOutput = ""
var charactersToRemove: [Character] = ["a", "e", "i", "o", "u", " "] 
for character in puzzleInput {
    if charactersToRemove.contains(character) {
        continue
    } else {
        puzzleOutput.append(character)
    }
}
print(puzzleOutput)

// Brake
puzzleInput = "great minds think alike"
puzzleOutput = ""
charactersToRemove = ["a", "e", "i", "o", "u", " "] 
for character in puzzleInput {
    if charactersToRemove.contains(character) {
        break
    } else {
        puzzleOutput.append(character)
    }
}
print(puzzleOutput)


//fallthrough ทำ Case ถัดไปเรื่อย 
print("----------------------------------------") 
albumOKComputer = "Airbag"
switch albumOKComputer {
	case "Airbag":
		print("Airbag: ")
		fallthrough
	case "Paranoid Android": 
		print("Paranoid Android: ")
		fallthrough
	case "Let Down": 
		print("Let Down: ")
		fallthrough
	case "No Surprises": 
		print("No Surprises: ")
		fallthrough
	
default:
    print("Not Album Ok Computer ")
}


// Labeled Statements 

var i_ = 0 ;
mult:
while(i_ <= 2 )
{
	i_ = i_ + 1 ; 
	for x in 1...13
	{
		if(x  <= 12 )
		{
			print("mul \(i_) * \(x) : ",i_*x)
			
		}
		else
		{
			print("--------------------------")
			continue mult
		}
		
	}
}
